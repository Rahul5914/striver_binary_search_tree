let’s tackle Leetcode 173: Binary Search Tree Iterator — one of the most elegant BST problems often discussed in Nutanix, Uber, and Google interviews because it tests your:

Understanding of BST in-order traversal

Ability to convert recursion into iteration using a stack

Design skills (implementing an efficient class with amortized O(1) next operations)

🎯 Problem Statement
Design an iterator over a binary search tree (BST). Your iterator should be initialized with the root node of a BST.

next() returns the next smallest number in the BST.

hasNext() returns whether there is a next number.

Leetcode Signature:

cpp
Copy code
class BSTIterator {
public:
    BSTIterator(TreeNode* root);
    int next();
    bool hasNext();
};
🧠 Interview Setup (Dialogue Style)
Interviewer:
Can you explain what “next smallest number” means in the context of a BST?

Candidate (You):
Yes — since the BST property ensures left < root < right, the “next smallest” element comes in in-order traversal order.
So, the sequence of next() calls should output an in-order traversal of the BST.

🔍 Step 1: Brute Force (Recursive Inorder)
Candidate:
The simplest approach is to do an in-order traversal once, store all elements in a vector, and then use an index to return elements one by one.

But interviewer might ask:

What’s the drawback?

✅ Simple but ❌ not memory-efficient — because it stores all nodes (O(N)), and not lazy (we precompute everything).

Brute Force Code
cpp
Copy code
class BSTIterator {
private:
    vector<int> inorder;
    int index;

    void inorderTraversal(TreeNode* root) {
        if (!root) return;
        inorderTraversal(root->left);
        inorder.push_back(root->val);
        inorderTraversal(root->right);
    }

public:
    BSTIterator(TreeNode* root) {
        inorderTraversal(root);
        index = 0;
    }

    int next() {
        return inorder[index++];
    }

    bool hasNext() {
        return index < inorder.size();
    }
};
Time Complexity: O(N) for traversal + O(1) per query

Space Complexity: O(N) for storing traversal

❌ Not optimal.

🚀 Step 2: Optimized Iterative Approach (Using Stack)
Interviewer:
Can we do this more efficiently — maybe without storing the entire traversal?

Candidate:
Yes! We can simulate the recursion using a stack to get elements on demand, achieving O(h) space instead of O(N), where h = height of BST.

🧩 Key Idea
We only push left nodes into the stack until we reach the smallest element.
When we call next():

Pop the top element (that’s the next smallest).

If the popped node has a right child, push all its left descendants.

Step-by-Step Dry Run
For BST:

markdown
Copy code
        7
       / \
      3   15
          / \
         9  20
Stack building:

Start with pushing all left nodes from root → [7, 3]
Stack (top): 3 → 7

next() → pop 3, result = 3
Push 3’s right (none)

next() → pop 7, result = 7
Push right subtree’s left path: [15, 9]

Stack (top): 9 → 15

…and so on.

✅ Optimized Code (Interview Ready)
cpp
Copy code
class BSTIterator {
private:
    stack<TreeNode*> st;

    // Helper: push all left nodes
    void pushLeft(TreeNode* node) {
        while (node) {
            st.push(node);
            node = node->left;
        }
    }

public:
    BSTIterator(TreeNode* root) {
        pushLeft(root);
    }

    int next() {
        TreeNode* node = st.top();
        st.pop();
        // If there's a right child, push its entire left path
        pushLeft(node->right);
        return node->val;
    }

    bool hasNext() {
        return !st.empty();
    }
};
🧮 Complexity Analysis
Operation	Time Complexity	Space Complexity
next()	Amortized O(1)	O(h)
hasNext()	O(1)	O(h)
Initialization	O(h)	O(h)

Amortized O(1):
Each node is pushed and popped exactly once → total O(N) for N calls → O(1) per call on average.

💡 Pattern Recognition & Interview Tricks
Pattern	Explanation
Lazy traversal	Don’t compute all results at once; simulate recursion with stack
In-order traversal simulation	Stack stores path of left nodes
Amortized Analysis	Each element is visited once — a common trick in “iterator” design questions

⚙️ Common Follow-up Questions
1️⃣ How would you implement a reverse iterator (next largest)?
→ Push right nodes first, then go left after popping.

2️⃣ What if we also need prev() operation?
→ Maintain a doubly linked in-order sequence or use two stacks (forward/backward).

3️⃣ Can we do it with O(1) space?
→ Yes, using Morris Traversal, but that modifies the tree (not allowed usually).

🧩 Reusable Template for Any Tree Iterator
cpp
Copy code
class TreeIterator {
private:
    stack<TreeNode*> st;
    bool reverse; // false = ascending, true = descending

    void pushAll(TreeNode* node) {
        while (node) {
            st.push(node);
            node = reverse ? node->right : node->left;
        }
    }

public:
    TreeIterator(TreeNode* root, bool isReverse) {
        reverse = isReverse;
        pushAll(root);
    }

    int next() {
        TreeNode* node = st.top(); st.pop();
        if (!reverse) pushAll(node->right);
        else pushAll(node->left);
        return node->val;
    }

    bool hasNext() {
        return !st.empty();
    }
};
✅ Reusable for:

BST Iterator

Two-pointer sum in BST

Reverse inorder traversal problems

🧠 Final Interview Recap
Concept	Key Takeaway
Traversal Type	Inorder gives sorted order
Optimization	Use stack to simulate recursion lazily
Space Reduction	O(h) using stack, vs O(N) for full traversal
Amortized Time	Each node pushed & popped once → O(1) avg per op
Patterns	Iterative inorder, iterator design, amortized analysis

Would you like me to extend this to show how to use this iterator to find the kth smallest element (a common follow-up asked in Nutanix and Google interviews)?







You said:
yes plese


ChatGPT said:
Perfect 🔥 — this is exactly the kind of follow-up that top interviewers (like at Nutanix, Google, or Uber) love after BST Iterator.

They’ll often say something like:

“Cool, you’ve built a BST Iterator. Now, how can you use it to find the k-th smallest element in a BST efficiently?”

Let’s walk through this follow-up in full interview-style format 👇

🧠 Problem Recap: Kth Smallest Element in a BST
Given the root of a Binary Search Tree (BST) and an integer k, return the k-th smallest value (1-indexed) of all the values of the nodes in the tree.

Leetcode 230. Kth Smallest Element in a BST

🗣️ Interview Dialogue
Interviewer:
You’ve just implemented a BST Iterator that gives the next smallest element in order. Can you now get the k-th smallest?

You:
Yes!
Since the iterator already returns elements in ascending order, the k-th call to next() will give the k-th smallest element.

🧩 Step 1: Using BSTIterator (Already Built)
We’ll reuse the BSTIterator class we just created.

Approach
Initialize iterator with the root.

Call next() k times.

The last returned value is our answer.

✅ Code Using BSTIterator
cpp
Copy code
class BSTIterator {
private:
    stack<TreeNode*> st;
    void pushLeft(TreeNode* node) {
        while (node) {
            st.push(node);
            node = node->left;
        }
    }

public:
    BSTIterator(TreeNode* root) {
        pushLeft(root);
    }

    int next() {
        TreeNode* node = st.top(); st.pop();
        pushLeft(node->right);
        return node->val;
    }

    bool hasNext() {
        return !st.empty();
    }
};

class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        BSTIterator it(root);
        int ans = -1;
        while (k-- > 0 && it.hasNext()) {
            ans = it.next();
        }
        return ans;
    }
};
🧮 Complexity Analysis
Operation	Time Complexity	Space Complexity
kthSmallest()	O(h + k)	O(h)
Explanation	O(h) for first left path push, O(k) for next() calls	stack holds up to height of tree

✅ Amortized O(1) per next()
✅ Efficient, lazy traversal
✅ Doesn’t modify tree

🔍 Dry Run Example
BST:

markdown
Copy code
        5
       / \
      3   6
     / \
    2   4
   /
  1
Let k = 3
Inorder = [1, 2, 3, 4, 5, 6] → 3rd smallest = 3

Steps:
Push all left: [5, 3, 2, 1]

next() → 1 (k=2)

next() → 2 (k=1)

next() → 3 (k=0)
✅ Answer = 3

🧠 Step 2: Direct Iterative (Without Separate Iterator Class)
If the interviewer says:

“Nice, but can you do it in one function without creating a separate class?”

You can integrate the same inorder stack logic directly.

Code (Direct Iterative)
cpp
Copy code
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode*> st;
        TreeNode* curr = root;

        while (true) {
            // Go left as much as possible
            while (curr) {
                st.push(curr);
                curr = curr->left;
            }

            curr = st.top(); st.pop();
            k--; // visiting one node in inorder
            if (k == 0) return curr->val; // found k-th smallest

            curr = curr->right;
        }
    }
};
✅ Same logic
✅ Less code
✅ Ideal if they want a “cleaner one-shot function”
✅ Still O(h + k) time, O(h) space

🧮 Complexity (Both Methods)
Metric	Value
Time Complexity	O(h + k)
Space Complexity	O(h)
Inorder Traversal Type	Lazy (on-demand)
Modification to Tree	None

⚙️ Step 3: If the Interviewer Pushes You Further
Follow-up 1️⃣ — What if the BST is frequently modified (insert/delete)?
Then our iterator-style traversal won’t help — we’d need a data structure that supports:

Order-statistics (like order_of_key() in PBDS or an augmented tree)

Maintain subtree sizes to get k-th smallest in O(log N)

cpp
Copy code
// Example node augmentation (concept)
struct Node {
    int val;
    Node* left;
    Node* right;
    int size; // count of nodes in subtree
};
Then:

leftSize = size(left subtree)

If k == leftSize + 1 → current node

If k <= leftSize → go left

Else → go right with k = k - leftSize - 1

✅ This gives O(log N) per query if we maintain sizes on insertion/deletion.

Follow-up 2️⃣ — What if we need Kth Largest?
You just reverse the traversal:

Go right first (instead of left)

Decrement k as you visit nodes in reverse-inorder

🧠 Pattern Recognition for Revision
Pattern	Explanation
Inorder Traversal → Sorted Order	Directly maps to “next smallest” logic
Lazy Traversal via Stack	Efficient, memory-optimal BST exploration
Iterator Design Pattern	Reusable across BST problems (Two Sum, Kth smallest/largest)
Amortized Analysis	Each node processed once → O(1) avg per call
Augmentation for Dynamic Trees	Maintain subtree sizes for O(logN) queries

🏁 Final Takeaway
Level	Approach	Time	Space	Comment
Easy	Recursive Inorder with vector	O(N)	O(N)	Simple but not lazy
Medium	Iterative Stack (One-shot function)	O(h + k)	O(h)	Efficient
Hard	Iterator Class	O(h + k)	O(h)	Elegant, reusable
Advanced	Augmented BST	O(logN)	O(1) extra	For dynamic updates

Would you like me to continue the next follow-up they usually ask after this —
👉 “Find if there exist two elements in a BST such that their sum equals target (using two BST iterators)” — it directly extends from this iterator concept and is a Nutanix/Google L3+ level variant.







You said:
yes


ChatGPT said:
Perfect! This is the classic follow-up interview problem that extends the BST iterator concept into a two-pointer technique on a BST. This is often asked in Nutanix, Uber, and Google interviews as a medium-to-hard problem.

🧠 Problem Statement
Given a BST and a target k, determine if there exist two elements in the BST whose sum equals k.

Constraints:

Use O(h) space (stack-based), not O(N).

BST property must be leveraged.

Leetcode variant: 653. Two Sum IV - Input is a BST

🗣️ Interview Dialogue
Interviewer:
You’ve built a BST iterator. How can you efficiently check if two numbers sum up to a target?

Candidate:
We can mimic the two-pointer approach used in arrays:

Use one iterator for next smallest (inorder).

Use another iterator for next largest (reverse inorder).

Move the pointers toward each other to find if the sum equals k.

🧩 Step 1: Implement Reverse Iterator
We already have BSTIterator for inorder (ascending).
We need a reverse iterator (descending):

cpp
Copy code
class BSTReverseIterator {
private:
    stack<TreeNode*> st;

    void pushRight(TreeNode* node) {
        while (node) {
            st.push(node);
            node = node->right;
        }
    }

public:
    BSTReverseIterator(TreeNode* root) {
        pushRight(root);
    }

    int next() {
        TreeNode* node = st.top(); st.pop();
        pushRight(node->left);
        return node->val;
    }

    bool hasNext() {
        return !st.empty();
    }
};
✅ Push rightmost nodes initially, then traverse in reverse in-order.

🧩 Step 2: Two-Pointer Approach on BST
cpp
Copy code
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if (!root) return false;

        BSTIterator left(root);           // ascending
        BSTReverseIterator right(root);   // descending

        int l = left.next();
        int r = right.next();

        while (l < r) {
            int sum = l + r;
            if (sum == k) return true;
            else if (sum < k) l = left.next();
            else r = right.next();
        }
        return false;
    }
};
🧮 Complexity Analysis
Metric	Value
Time Complexity	O(N) worst case (each node visited once)
Space Complexity	O(h) (two stacks of height h)
Traversal Type	Lazy, O(1) amortized per iterator

🔍 Dry Run Example
BST:

markdown
Copy code
        5
       / \
      3   6
     / \   \
    2   4   7
Target k = 9

Ascending iterator → 2

Descending iterator → 7

2 + 7 = 9 ✅ Found!

If not found, pointers move inward until they meet.

🧠 Key Interview Takeaways
Concept	Takeaway
Two iterators = Two pointers	Works like array two-pointer but on BST using O(h) space
Lazy traversal	Only process nodes on demand
Amortized O(1)	Each node pushed/popped once per iterator
Stack height = h	Memory-efficient for large BSTs
Reusability	Can be extended to k-th smallest/largest, range queries

🔄 Follow-up Variants
Count pairs with sum = k → iterate both ends and count instead of returning bool

Find all unique pairs → use same two-pointer approach

BST with duplicates → handle equality carefully (l != r)

Dynamic BST → augment tree with size/count for efficient pair sum queries

⚡ Pattern Recognition
Inorder → sorted ascending

Reverse inorder → sorted descending

Two-pointer technique applies perfectly on BST iterators

Lazy stack-based traversal → O(h) memory instead of O(N)

If you want, I can make a fully connected “BST Iterator + Kth Smallest + Two Sum BST” cheat sheet showing all three linked together with code templates and dry run examples, which is exactly how interviewers at Nutanix/FAANG will ask consecutive questions.

Do you want me to do that next?







You said:
yes please


ChatGPT said:
Perfect! Let’s make a complete BST Iterator Cheat Sheet — a single connected guide covering:

BST Iterator (next smallest)

Kth Smallest Element using Iterator

Two Sum in BST using two iterators

This will be interview-ready, with code templates, dry runs, and complexity analysis. Think of it as your Nutanix/FAANG BST toolkit.

🌳 BST Iterator Cheat Sheet
1️⃣ BST Iterator – Next Smallest Element
Problem: Traverse BST in ascending order lazily.

✅ Key Idea
Use a stack to simulate recursive in-order traversal

Push all left nodes first

next() pops the top and pushes left path of right child

Code Template
cpp
Copy code
class BSTIterator {
private:
    stack<TreeNode*> st;

    void pushLeft(TreeNode* node) {
        while (node) {
            st.push(node);
            node = node->left;
        }
    }

public:
    BSTIterator(TreeNode* root) {
        pushLeft(root);
    }

    int next() {
        TreeNode* node = st.top(); st.pop();
        pushLeft(node->right);
        return node->val;
    }

    bool hasNext() {
        return !st.empty();
    }
};
Complexity:

next(): Amortized O(1)

hasNext(): O(1)

Space: O(h)

Dry Run:

perl
Copy code
BST:      7
         / \
        3   15
           /  \
          9   20

Stack after init: [7,3] (top 3)
next() -> 3
next() -> 7, push 15 and its left 9 -> Stack: [15,9]
next() -> 9
...
2️⃣ Kth Smallest Element in BST Using Iterator
Problem: Return kth smallest element (1-indexed).

Key Idea
Reuse BSTIterator

Call next() k times → last value is answer

Code Template
cpp
Copy code
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        BSTIterator it(root);
        int ans = -1;
        while (k-- > 0 && it.hasNext()) {
            ans = it.next();
        }
        return ans;
    }
};
Complexity:

Time: O(h + k)

Space: O(h)

Dry Run:

makefile
Copy code
BST:      5
         / \
        3   6
       / \
      2   4
     /
    1

k = 3, inorder = [1,2,3,4,5,6]
next() -> 1,2,3 → answer = 3
Optional: One-shot Iterative Function (without separate iterator class)
cpp
Copy code
int kthSmallest(TreeNode* root, int k) {
    stack<TreeNode*> st;
    TreeNode* curr = root;
    while (true) {
        while (curr) { st.push(curr); curr = curr->left; }
        curr = st.top(); st.pop();
        if (--k == 0) return curr->val;
        curr = curr->right;
    }
}
3️⃣ Two Sum in BST (Sum = Target) Using Two Iterators
Problem: Determine if two BST nodes sum up to target k

Key Idea
Use two iterators:

Inorder (ascending) → left

Reverse Inorder (descending) → right

Move pointers like two-pointer in sorted array

Reverse Iterator Template
cpp
Copy code
class BSTReverseIterator {
private:
    stack<TreeNode*> st;

    void pushRight(TreeNode* node) {
        while (node) {
            st.push(node);
            node = node->right;
        }
    }

public:
    BSTReverseIterator(TreeNode* root) {
        pushRight(root);
    }

    int next() {
        TreeNode* node = st.top(); st.pop();
        pushRight(node->left);
        return node->val;
    }

    bool hasNext() {
        return !st.empty();
    }
};
Two-pointer Implementation
cpp
Copy code
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if (!root) return false;

        BSTIterator left(root);           // ascending
        BSTReverseIterator right(root);   // descending

        int l = left.next();
        int r = right.next();

        while (l < r) {
            int sum = l + r;
            if (sum == k) return true;
            else if (sum < k) l = left.next();
            else r = right.next();
        }
        return false;
    }
};
Complexity:

Time: O(N) worst case (each node visited once)

Space: O(h) (two stacks)

Dry Run:

makefile
Copy code
BST:      5
         / \
        3   6
       / \   \
      2   4   7

k = 9
l=2 (smallest), r=7 (largest)
2+7=9 ✅ Found
🔑 Summary: BST Iterator Pattern
Concept	Use Case
BSTIterator	Next smallest (in-order traversal)
Reverse Iterator	Next largest (reverse in-order traversal)
Kth Smallest	Use iterator k times
Two Sum in BST	Two iterators like two pointers
Lazy traversal	O(h) memory instead of O(N)
Amortized O(1)	Each node visited once

🏆 Interview Tips
Always explain stack simulation of recursion first.

Dry run small BST examples with next() to convince the interviewer.

Mention amortized complexity — shows deeper understanding.

Show variants: kth largest, all pairs sum, dynamic BST (augmentation).

Be ready to write both iterator-based and one-shot function solutions.

If you want, I can also make a visual diagram with stacks for all three scenarios so you can memorize the traversal flow in under 2 minutes for interviews — super handy for Nutanix/OA/onsite prep.

Do you want me to do that next?







You said:
yes


ChatGPT said:
Perfect! Let’s make a visual cheat sheet for BST Iterator, Kth Smallest, and Two Sum in BST — showing stack states and traversal flow step by step. This is exactly what interviewers love when you explain your thought process on the whiteboard.

🌳 BST Iterator Visual Guide
We’ll use this BST for all examples:

markdown
Copy code
        5
       / \
      3   6
     / \
    2   4
   /
  1
1️⃣ BST Iterator – Next Smallest (Inorder)
Goal: Traverse BST in ascending order using a stack (lazy traversal).

Step 0: Initialize
Push all left nodes from root: 5 → 3 → 2 → 1

Stack (top → bottom): [1,2,3,5]

Step 1: next() → 1
Pop 1 → no right child

Stack after pop: [2,3,5]

Output: 1 ✅

Step 2: next() → 2
Pop 2 → push left path of right child (2 has no right)

Stack: [3,5]

Output: 2 ✅

Step 3: next() → 3
Pop 3 → push left path of right child (4)

Stack: [4,5]

Output: 3 ✅

Step 4: next() → 4
Pop 4 → no right child

Stack: [5]

Output: 4 ✅

Step 5: next() → 5
Pop 5 → push left path of right child (6)

Stack: [6]

Output: 5 ✅

Step 6: next() → 6
Pop 6 → no right child

Stack: []

Output: 6 ✅

Traversal complete: [1,2,3,4,5,6]

✅ This confirms iterator works step by step.

2️⃣ Kth Smallest Element (Using BST Iterator)
Example: k = 3

Call next() 3 times: 1 → 2 → 3

✅ Answer = 3

Stack trace per call:

[1,2,3,5] → pop 1 → [2,3,5]

[2,3,5] → pop 2 → [3,5]

[3,5] → pop 3 → [4,5]

Observation: Stack is always top = next smallest.

3️⃣ Two Sum in BST (Two Iterators)
Goal: Find two elements summing to target = 9

Iterators
Left iterator (ascending): next smallest

Right iterator (descending): next largest

Step 0: Initialize
Left stack: [1,2,3,5] → top = 1

Right stack: [6,5] → top = 6

Step 1: Compare sum
l = 1, r = 6 → sum = 7 < 9 → move left pointer

Call next() on left → l = 2

Left stack after pop: [2,3,5] → pop 2 → [3,5]

Step 2: Compare sum
l = 2, r = 6 → sum = 8 < 9 → move left pointer

Call next() on left → l = 3

Left stack: [4,5]

Step 3: Compare sum
l = 3, r = 6 → sum = 9 ✅ Found

Observation: Two iterators mimic two-pointer technique on array

Left iterator always points to next smallest

Right iterator always points to next largest

Move pointers based on sum comparison

🎯 Quick Memory Tips
Task	Stack Init	Stack Top	Pointer Moves
Next Smallest	Push all left from root	Smallest	Pop top, push left path of right child
Kth Smallest	Same as iterator	Kth pop	Pop k times
Two Sum	Left: push all left, Right: push all right	L: smallest, R: largest	If sum < target → next left, else → next right

✅ Bonus Visual Tips for Whiteboard
Draw stack at each step instead of the whole tree.

Show top of stack clearly → next node to output.

For two sum: draw two stacks side by side with top pointers labeled.

Explain lazy traversal — nodes only pushed when needed.

If you want, I can make a single-page PDF-style cheat sheet combining:

All three scenarios

Stack diagrams

Dry runs

Code templates

This will be your interview-ready visual BST toolkit to memorize in 5 minutes.

Do you want me to create that next?







You said:
yes


ChatGPT said:
Perfect! Let’s create a single-page, interview-ready BST toolkit cheat sheet — combining BST Iterator, Kth Smallest, and Two Sum in BST, with code templates, dry runs, and stack diagrams so you can memorize it in 5 minutes. I’ll format it like a PDF/page style you could print or keep as notes.

🌳 BST Interview Cheat Sheet (Iterator + Kth Smallest + Two Sum)
1️⃣ BST Iterator – Next Smallest
Problem: Return elements in ascending order (lazy traversal).

Key Idea
Stack simulates recursion

Push all left nodes first

next() → pop top, push left path of right child

Code Template
cpp
Copy code
class BSTIterator {
private:
    stack<TreeNode*> st;
    void pushLeft(TreeNode* node) {
        while (node) { st.push(node); node = node->left; }
    }
public:
    BSTIterator(TreeNode* root) { pushLeft(root); }
    int next() {
        TreeNode* node = st.top(); st.pop();
        pushLeft(node->right);
        return node->val;
    }
    bool hasNext() { return !st.empty(); }
};
Complexity:

next(): Amortized O(1)

hasNext(): O(1)

Space: O(h)

Dry Run (BST Example):

perl
Copy code
        5
       / \
      3   6
     / \
    2   4
   /
  1

Stack Init: [1,2,3,5] top=1
next() → 1 → stack: [2,3,5]
next() → 2 → stack: [3,5]
next() → 3 → push 4 → stack: [4,5]
next() → 4 → stack: [5]
next() → 5 → push 6 → stack: [6]
next() → 6 → stack: []
2️⃣ Kth Smallest Element
Problem: Return kth smallest element in BST

Key Idea
Use BSTIterator

Call next() k times → last value is answer

Code Template
cpp
Copy code
int kthSmallest(TreeNode* root, int k) {
    BSTIterator it(root);
    int ans = -1;
    while(k-- > 0 && it.hasNext()) ans = it.next();
    return ans;
}
Dry Run: k = 3

next() → 1 → 2 → 3 ✅ Answer = 3

Stack states: [1,2,3,5] → [2,3,5] → [3,5] → [4,5]

Complexity: O(h+k) time, O(h) space

3️⃣ Two Sum in BST (Target Sum)
Problem: Determine if there exist two nodes summing to k

Key Idea
Use two iterators:

Inorder → ascending (left)

Reverse Inorder → descending (right)

Move pointers like two-pointer in sorted array

Reverse Iterator Template
cpp
Copy code
class BSTReverseIterator {
private:
    stack<TreeNode*> st;
    void pushRight(TreeNode* node) {
        while(node) { st.push(node); node=node->right; }
    }
public:
    BSTReverseIterator(TreeNode* root) { pushRight(root); }
    int next() {
        TreeNode* node = st.top(); st.pop();
        pushRight(node->left);
        return node->val;
    }
    bool hasNext() { return !st.empty(); }
};
Two-pointer Implementation
cpp
Copy code
bool findTarget(TreeNode* root, int k) {
    BSTIterator left(root);
    BSTReverseIterator right(root);
    int l = left.next();
    int r = right.next();
    while(l < r) {
        int sum = l+r;
        if(sum==k) return true;
        else if(sum<k) l = left.next();
        else r = right.next();
    }
    return false;
}
Dry Run Example:

BST: same as above, k=9

left top=1, right top=6 → sum=7 < 9 → next left

left=2, right=6 → sum=8 < 9 → next left

left=3, right=6 → sum=9 ✅ Found

Complexity: O(N) time worst case, O(h) space

🧩 Stack Diagram Summary
Task	Stack Init	Top	Move
Next Smallest	Push all left from root	Smallest	Pop top, push left path of right child
Kth Smallest	Same as iterator	Kth pop	Pop k times
Two Sum	Left push all left, Right push all right	L=smallest, R=largest	If sum<target → next left, else → next right

✅ Interview Tips
Always draw stack instead of whole tree on whiteboard.

Explain lazy traversal (nodes processed on demand).

Highlight amortized O(1) next() and O(h) space.

Mention variants:

Kth largest → reverse iterator

All pairs sum → extend two-pointer approach

Dynamic BST → augment tree with subtree sizes

Show dry run with stack states for clarity.

This sheet covers all BST iterator patterns in one page — ready for Nutanix/FAANG onsite prep.
